#!/usr/bin/env python

"""
Global Planner for Mushr Navigation.

Author: Doerr, Schiffer
"""

import numpy as np
import rospy
import std_msgs
import tf
import yaml
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import OccupancyGrid, Path
from pysbpl import map_util, planner


class GlobalPlanner:
    """ROS Wrapper for pysbpl Planner."""

    def __init__(self, name):
        """
        Initialize global planner.

        Attributes:
            name (string) rosnode name

        """
        rospy.init_node(name, anonymous=True)

        # Setup params
        config_file = open(rospy.get_param("~config_path"))
        self.params = yaml.load(config_file)

        self.mprim_path = rospy.get_param("~mprim_path")

        self.start = None
        self.path = None
        self.sbpl_planner = None
        self.map = map_util.Map(
            mprim_path=self.mprim_path, unknown_value=self.params["unknown_is_occupied"]
        )

        # initialize subscribers
        self.goal_sub = rospy.Subscriber(
            rospy.get_param("~goal_topic"), PoseStamped, self.goal_cb, queue_size=1
        )
        self.start_sub = rospy.Subscriber(
            rospy.get_param("~start_topic"),
            PoseStamped,
            self.set_start_cb,
            queue_size=1,
        )
        self.map_sub = rospy.Subscriber(
            rospy.get_param("~map"), OccupancyGrid, self.set_map_cb, queue_size=1
        )

        # initialize publisher
        self.path_publisher = rospy.Publisher(
            rospy.get_param("~path_topic"), Path, queue_size=1
        )

        self.params["perimeter"] = [
            [-0.2, -0.235],
            [0.2, -0.235],
            [0.2, 0.235],
            [-0.2, 0.235],
        ]

        self.params["mprim_path"] = self.mprim_path.encode("utf-8")

        rate = rospy.Rate(3)
        while not rospy.is_shutdown():
            rate.sleep()
            if self.path is not None:
                self.path_publisher.publish(self.path)

    def goal_cb(self, msg):
        """
        Plan a path from recorded start to new goal.

        Attributes:
            msg (geometry_msgs/PoseStamped): goal position

        """
        rate = rospy.Rate(3)
        if self.sbpl_planner is None:
            print("Waiting for a map")
            rate = rospy.Rate(1)
            while self.sbpl_planner is None:
                rate.sleep()
            print("Map found")

        theta = tf.transformations.euler_from_quaternion(
            [
                msg.pose.orientation.x,
                msg.pose.orientation.y,
                msg.pose.orientation.z,
                msg.pose.orientation.w,
            ]
        )
        goal = [msg.pose.position.x, msg.pose.position.y, theta[2]]

        path, headings, actions = self.sbpl_planner.plan(
            self.start, goal, allocated_time=10, init_eps=self.params["initial_epsilon"]
        )

        path_plan = Path()
        path_plan.header = std_msgs.msg.Header()
        path_plan.header.stamp = rospy.Time.now()
        path_plan.header.frame_id = "map"

        for i, point in enumerate(path):
            angle = headings[i]
            pose = PoseStamped()
            pose.pose.position.x = point[0]
            pose.pose.position.y = point[1]
            pose.pose.position.z = 0

            quaternion = tf.transformations.quaternion_from_euler(0, 0, angle)
            pose.pose.orientation.x = quaternion[0]
            pose.pose.orientation.y = quaternion[1]
            pose.pose.orientation.z = quaternion[2]
            pose.pose.orientation.w = quaternion[3]
            path_plan.poses.append(pose)

        self.path = path_plan
        self.path_publisher.publish(path_plan)
        print("Path published with length " + str(len(path)))

    def set_start_cb(self, msg):
        """
        Record the new car position as the start.

        Attributes:
            msg (geometry_msgs/PoseStamped): goal position

        """
        theta = tf.transformations.euler_from_quaternion(
            [
                msg.pose.orientation.x,
                msg.pose.orientation.y,
                msg.pose.orientation.z,
                msg.pose.orientation.w,
            ]
        )
        self.start = [msg.pose.position.x, msg.pose.position.y, theta[2]]

    def set_map_cb(self, msg):
        """
        Load and save the map.

        Attributes:
            msg (nav_msgs/OccupancyGrid): map representation

        """
        img = np.array(
            np.reshape(msg.data, (msg.info.height, msg.info.width)), dtype=np.float32
        )
        origin = [
            msg.info.origin.position.x,
            msg.info.origin.position.y,
            msg.info.origin.position.z,
        ]
        self.map.load_map(img, round(msg.info.resolution, 3), origin, 0.1, 0.09)
        self.params["map"] = self.map

        if self.sbpl_planner is None:
            self.sbpl_planner = planner.Planner(**self.params)


if __name__ == "__main__":
    global_planner = GlobalPlanner("global_planner")
